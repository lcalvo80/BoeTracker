name: CI - Python + PostgreSQL

on:
  workflow_dispatch:
    inputs:
      from_date:
        description: "Fecha inicio (YYYY-MM-DD o YYYYMMDD)"
        required: false
        type: string
        default: ""
      to_date:
        description: "Fecha fin (YYYY-MM-DD o YYYYMMDD)"
        required: false
        type: string
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      FROM_DATE: ${{ github.event.inputs.from_date }}
      TO_DATE: ${{ github.event.inputs.to_date }}

      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

      OPENAI_TIMEOUT: "45"
      OPENAI_MAX_RETRIES: "3"
      OPENAI_BACKOFF_BASE: "1.5"
      # OPENAI_MODEL: "gpt-4o-mini"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (psql)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Esperar a que PostgreSQL esté listo
        env:
          PGPASSWORD: test_password
        run: |
          for i in {1..30}; do
            if psql -h localhost -U test_user -d test_db -c "select 1" >/dev/null 2>&1; then
              echo "PostgreSQL listo."
              exit 0
            fi
            echo "Esperando PostgreSQL ($i/30)..."
            sleep 2
          done
          echo "PostgreSQL no respondió a tiempo." >&2
          exit 1

      - name: Ejecutar actualización del BOE (keep-alive + normalización)
        shell: bash
        run: |
          set -euo pipefail

          # Keep-alive para evitar "no output" >10 min
          ( while true; do echo "💓 runner activo $(date -u +%H:%M:%S)"; sleep 60; done ) &
          KA_PID=$!
          trap "kill $KA_PID" EXIT

          # Normaliza YYYYMMDD -> YYYY-MM-DD
          norm_date() {
            local s="${1:-}"
            if [[ "$s" =~ ^[0-9]{8}$ ]]; then
              echo "${s:0:4}-${s:4:2}-${s:6:2}"
            else
              echo "$s"
            fi
          }

          FROM_NORM="$(norm_date "${FROM_DATE:-}")"
          TO_NORM="$(norm_date "${TO_DATE:-}")"

          ARGS=()
          if [[ -n "${FROM_NORM}" ]]; then ARGS+=(--from "$FROM_NORM"); fi
          if [[ -n "${TO_NORM}" ]]; then ARGS+=(--to "$TO_NORM"); fi

          echo "Invocación: python update_boe.py ${ARGS[*]:-<sin args>}"
          stdbuf -oL -eL python update_boe.py "${ARGS[@]:-}"
